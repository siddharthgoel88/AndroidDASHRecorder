diff --git a/src/com/cs5248/androiddashrecorder/SplitVideo.java b/src/com/cs5248/androiddashrecorder/SplitVideo.java
index 729e9ed..4ab69fc 100644
--- a/src/com/cs5248/androiddashrecorder/SplitVideo.java
+++ b/src/com/cs5248/androiddashrecorder/SplitVideo.java
@@ -11,6 +11,7 @@ import com.googlecode.mp4parser.authoring.Track;
 import com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder;
 import com.googlecode.mp4parser.authoring.container.mp4.MovieCreator;
 import com.googlecode.mp4parser.authoring.tracks.CroppedTrack;
+import com.googlecode.mp4parser.h264.model.VUIParameters;
 
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -49,6 +50,19 @@ public class SplitVideo extends AsyncTask<String, Double, Integer> {
     	segmentProgress.setMax(100);
     }
     
+    public int compareDouble(double a, double b)
+    {
+    	if (Math.abs(a-b) < 0.000001)
+    	{
+    		return 0;
+    	}
+    	else if ((a-b) > 0.00001)
+    	{
+    		return 1;
+    	}
+    	else return -1;
+    }
+    
     /**
      * Splits a video into multiple clips of specified duration of seconds
      * 
@@ -131,26 +145,29 @@ public class SplitVideo extends AsyncTask<String, Double, Integer> {
         percentage = (startTime * 100) / videoTime;
         publishProgress(percentage);
         
-        if (startTime == endTime) 
+        if (compareDouble(startTime, endTime) == 0)
         	return false;
         
         for (Track track : tracks) {
             long currentSample = 0;
             double currentTime = 0;
-            double lastTime = 0;
+            double lastTime = -1.0;
             long startSample1 = -1;
             long endSample1 = -1;
 
             for (int i = 0; i < track.getSampleDurations().length; i++) {
                 long delta = track.getSampleDurations()[i];
 
-
-                if (currentTime > lastTime && currentTime <= startTime) {
+                Log.i("DASH", "Current time = " + currentTime + ", Last time = " + lastTime + ", start time = " + startTime +
+                		", end time = " + endTime + ", current sample = " + currentSample);
+                if ((compareDouble(currentTime, lastTime) == 1) && !(compareDouble(currentTime, startTime) == 1)) {
                     // current sample is still before the new starttime
+                	Log.i("DASH", "Entered start");
                     startSample1 = currentSample;
                 }
-                if (currentTime > lastTime && currentTime <= endTime) {
+                if ((compareDouble(currentTime, lastTime) == 1) && !(compareDouble(currentTime, endTime) == 1)) {
                     // current sample is after the new start time and still before the new endtime
+                	Log.i("DASH", "Entered end");
                     endSample1 = currentSample;
                 }
 
@@ -158,6 +175,7 @@ public class SplitVideo extends AsyncTask<String, Double, Integer> {
                 currentTime += (double) delta / (double) track.getTrackMetaData().getTimescale();
                 currentSample++;
             }
+            Log.i("DASH", "Start sample = " + startSample1 + ", end sample = " + endSample1);
             movie.addTrack(new CroppedTrack(track, startSample1, endSample1));
         }
         long start1 = System.currentTimeMillis();
@@ -192,7 +210,8 @@ public class SplitVideo extends AsyncTask<String, Double, Integer> {
         }
         double previous = 0;
         for (double timeOfSyncSample : timeOfSyncSamples) {
-            if (timeOfSyncSample > cutHere) {
+        	if (compareDouble(cutHere, 0.02) == 1) {
+            if (compareDouble(timeOfSyncSample, cutHere) == 1) {
                 if (next) {
                     return timeOfSyncSample;
                 } else {
@@ -200,6 +219,9 @@ public class SplitVideo extends AsyncTask<String, Double, Integer> {
                 }
             }
             previous = timeOfSyncSample;
+        	} else {
+        		return timeOfSyncSamples[0];
+        	}
         }
         return timeOfSyncSamples[timeOfSyncSamples.length - 1];
     }
