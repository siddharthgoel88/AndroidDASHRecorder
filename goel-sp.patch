diff --git a/src/com/cs5248/androiddashrecorder/SplitVideo.java b/src/com/cs5248/androiddashrecorder/SplitVideo.java
index 729e9ed..0a9cf8c 100644
--- a/src/com/cs5248/androiddashrecorder/SplitVideo.java
+++ b/src/com/cs5248/androiddashrecorder/SplitVideo.java
@@ -33,11 +33,13 @@ public class SplitVideo extends AsyncTask<String, Double, Integer> {
 	private String filename;
 	private boolean set;
 	private double videoTime;
+	private double tempStartTime;
 	private double percentage;
 	private int segmentNumber;
 	
 	private  ProgressBar segmentProgress;
     private  TextView textview;
+    private final String TAG = "DASH Split";
     
     public SplitVideo(ProgressBar segmentProgress, TextView textView) {
     	this.segmentProgress = segmentProgress;
@@ -58,7 +60,7 @@ public class SplitVideo extends AsyncTask<String, Double, Integer> {
      * @return Number of segments created in splitting of video
      */
     public int split(String path, String destinationPath, double splitDuration) {
-    	double startTime = 0.01;
+    	double startTime = 0.00;
     	segmentNumber = 1;
     	
     	videoTime = 0.0;
@@ -71,7 +73,8 @@ public class SplitVideo extends AsyncTask<String, Double, Integer> {
     	try {
     		while (performSplit(startTime, startTime + splitDuration, segmentNumber)) {
         		segmentNumber++;
-        		startTime += splitDuration;
+        		//startTime += splitDuration;
+        		startTime = tempStartTime;
         	}
     	} catch (FileNotFoundException e) {
     		e.printStackTrace();
@@ -128,10 +131,11 @@ public class SplitVideo extends AsyncTask<String, Double, Integer> {
             }
         }
         
+        tempStartTime = endTime;
         percentage = (startTime * 100) / videoTime;
         publishProgress(percentage);
         
-        if (startTime == endTime) 
+        if ( Double.compare(startTime,endTime) == 0) 
         	return false;
         
         for (Track track : tracks) {
@@ -145,11 +149,11 @@ public class SplitVideo extends AsyncTask<String, Double, Integer> {
                 long delta = track.getSampleDurations()[i];
 
 
-                if (currentTime > lastTime && currentTime <= startTime) {
+                if (Double.compare(currentTime, lastTime) >= 0 && Double.compare(currentTime,startTime) <= 0) {
                     // current sample is still before the new starttime
                     startSample1 = currentSample;
                 }
-                if (currentTime > lastTime && currentTime <= endTime) {
+                if (Double.compare(currentTime, lastTime) > 0 && Double.compare(currentTime,endTime) <= 0) {
                     // current sample is after the new start time and still before the new endtime
                     endSample1 = currentSample;
                 }
@@ -158,6 +162,8 @@ public class SplitVideo extends AsyncTask<String, Double, Integer> {
                 currentTime += (double) delta / (double) track.getTrackMetaData().getTimescale();
                 currentSample++;
             }
+            Log.i(TAG, "Start time = " + startTime + ", End time = " + endTime);
+            Log.i(TAG, "Making movie from startSample = " + startSample1 + ", endSample = " + endSample1 );
             movie.addTrack(new CroppedTrack(track, startSample1, endSample1));
         }
         long start1 = System.currentTimeMillis();
@@ -192,7 +198,7 @@ public class SplitVideo extends AsyncTask<String, Double, Integer> {
         }
         double previous = 0;
         for (double timeOfSyncSample : timeOfSyncSamples) {
-            if (timeOfSyncSample > cutHere) {
+            if (Double.compare(timeOfSyncSample, cutHere) >= 0) {
                 if (next) {
                     return timeOfSyncSample;
                 } else {
